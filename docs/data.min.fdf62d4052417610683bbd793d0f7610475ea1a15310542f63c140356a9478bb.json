[{"link":"/nagoya-example/posts/anime/jcdk/characters/jashin-chan/","text":"邪神ちゃんの性格\t「邪神ちゃん」という魔界からやってきた少女は、非常に特異な性格を持っています。\n彼女は、自分より弱い者に対して尊大な態度を取り、いじめや嫌がらせ、物品や食料の強奪などを平然と行います。また、勝つために卑怯な手段を用いたり、借りた金を自発的に返さず、趣味に課金するなどの行動も見られます。口調は清楚風なお嬢様キャラクターですが、興奮するとヤクザ口調になります。\t「邪神ちゃん」という魔界からやってきた少女は、非常に特異な性格を持っています。 彼女は、自分より弱い者に対して尊大な態度を取り、いじめや嫌がらせ、物品や食料の強奪などを平然と行います。また、勝つために卑怯な手段を用いたり、借りた金を自発的に返さず、趣味に課金するなどの行動も見られます。口調は清楚風なお嬢様キャラクターですが、興奮するとヤクザ口調になります。 一方で、彼女は家事や料理が得意で、専業主婦を自称するほどです。また、節々に面倒見の良さを覗かせることもあります。 しかし、彼女はゆりねを殺害して魔界に帰ることを諦めておらず、様々な手段で彼女を殺そうとするが失敗に終わります。また、彼女は幼なじみであるメデューサやミノスに対しても悪戯や外道行為を行い、嫉妬心が強く、時には危険思想に走ることもあります。 邪神ちゃんは、根は寂しがり屋で、身内がバカにされることには容赦しないという一面もあります。また、食べ物を粗末にすることは許さないが、食べかけのものを机の引き出しやクリアファイルにしまう悪癖があることも注意が必要です。 邪神ちゃんの性格まとめ 自分より弱い者に対して尊大な態度を取る いじめや嫌がらせ、物品や食料の強奪などを平然と行う 勝つために卑怯な手段を用いる 借りた金を自発的に返す事はなく、趣味に課金する 口調は清楚風なお嬢様キャラクターだが、興奮するとヤクザ口調になる ゆりねを殺害して魔界に帰る事を諦めておらず、様々な手段でゆりねを殺そうとするが失敗に終わる メデューサやミノスとは幼なじみだが、彼女らに対しても悪戯や外道行為を行う 嫉妬心が強く、時には危険思想に走る 根は寂しがり屋で、身内がバカにされる事には容赦しない 節々に面倒見の良さを覗かせる 家事や料理が得意で、専業主婦を自称する 食べ物を粗末にする事は許さないが、食べかけのものを机の引き出しやクリアファイルにしまう悪癖がある 邪神ちゃんは、非常に特異な性格を持った少女であり、彼女の行動や言動には注意が必要です。","title":"邪神ちゃんの性格"},{"link":"/nagoya-example/posts/programming/csharp/fix/","text":"C# で無名再帰\tこのコードは、C# 言語で再帰的な関数を無名で作成するためのライブラリです。このライブラリを利用することで、再帰的な関数を使う際に必要な再帰呼び出しを簡単に行うことができます。\nこのライブラリは、Fix メソッドによって構成されています。Fix メソッドは、Func 型の引数を受け取り、再帰呼び出しを行うための関数を返します。\tこのコードは、C# 言語で再帰的な関数を無名で作成するためのライブラリです。このライブラリを利用することで、再帰的な関数を使う際に必要な再帰呼び出しを簡単に行うことができます。 このライブラリは、Fix メソッドによって構成されています。Fix メソッドは、Func 型の引数を受け取り、再帰呼び出しを行うための関数を返します。 public static class Lambda { public static Func\u003cTResult\u003e Fix\u003cTResult\u003e(Func\u003cFunc\u003cTResult\u003e, Func\u003cTResult\u003e\u003e fix) { if (fix != null) { return () =\u003e fix(Fix(fix))(); } else { throw new ArgumentNullException(nameof(fix)); } } public static Func\u003cT, TResult\u003e Fix\u003cT, TResult\u003e(Func\u003cFunc\u003cT, TResult\u003e, Func\u003cT, TResult\u003e\u003e fix) { if (fix != null) { return a =\u003e fix(Fix(fix))(a); } else { throw new ArgumentNullException(nameof(fix)); } } public static Func\u003cT1, T2, TResult\u003e Fix\u003cT1, T2, TResult\u003e(Func\u003cFunc\u003cT1, T2, TResult\u003e, Func\u003cT1, T2, TResult\u003e\u003e fix) { if (fix != null) { return (a, b) =\u003e fix(Fix(fix))(a, b); } else { throw new ArgumentNullException(nameof(fix)); } } public static Func\u003cT1, T2, T3, TResult\u003e Fix\u003cT1, T2, T3, TResult\u003e(Func\u003cFunc\u003cT1, T2, T3, TResult\u003e, Func\u003cT1, T2, T3, TResult\u003e\u003e fix) { if (fix != null) { return (a, b, c) =\u003e fix(Fix(fix))(a, b, c); } else { throw new ArgumentNullException(nameof(fix)); } } } Fix メソッドは、引数の数に応じて、4 つのオーバーロードが用意されています。それぞれ、引数が 0 つの場合、1 つの場合、2 つの場合、3 つの場合に対応します。これにより、引数の数に応じて、再帰的な関数を定義することができます。 例えば、次のような再帰的な関数を定義することができます。 Func\u003cint, int\u003e fib = Lambda.Fix\u003cint, int\u003e(f =\u003e n =\u003e n \u003c 2 ? 1 : f(n - 1) + f(n - 2)); このように、Lambda クラスを利用することで、再帰的な関数を簡単に定義することができます。","title":"C# で無名再帰"},{"link":"/nagoya-example/posts/programming/python/prime/","text":"Python で素数列挙\t際限なく素数を出力し続ける Python のジェネレータについて説明します。\nPython の itertools ライブラリの count 関数と、シンプルな再帰を利用して非常にコンパクトに実装することができます。\t際限なく素数を出力し続ける Python のジェネレータについて説明します。 Python の itertools ライブラリの count 関数と、シンプルな再帰を利用して非常にコンパクトに実装することができます。 次に示すコードを見てみましょう。 from itertools import count def prime(): def sieve(ints): i = next(ints) yield i for n in sieve(k for k in ints if k % i != 0): yield n return sieve(count(2)) このコードの核心部分は、エラトステネスの篩（ふるい）という古代ギリシャの素数列挙アルゴリズムを利用した prime 関数です。 まず、Python 標準ライブラリの itertools から count をインポートします。次に、prime という関数を作ります。 この関数の中に、途切れることなく整数を出力し続けるジェネレーター関数 sieve が定義されています。このジェネレーター関数は、整数列（この場合は 2 から始まる整数列）を引数とし、コルーチンのように振舞います。 sieve 関数の中で、最初に次の整数を取り出して i に保存します。i は素数であり、出力するべき値です。それから、その整数で割り切れない数のみを出力するジェネレータ k for k in ints if k % i != 0 を作成します。 そして、そのジェネレーターを再び sieve 関数に渡すことで、sieve 関数は再帰的に呼び出されることになります。ここで出力されるすべての数は、前のすべての素数で割り切れない素数になります。 これらすべてを組み合わせると、prime 関数は素数を無限に出力できるイテレータを返します。 なお、このコードは真の無限シーケンスを生成しますので、利用の際は注意が必要です。例えば、全ての素数を列挙しようとすると、その操作は永遠に終わらないのでプログラムが停止することはありません。","title":"Python で素数列挙"},{"link":"/nagoya-example/posts/anime/mmppp/chara/","text":"ぴちぴちピッチのマーメイドプリンセスまとめ\tアニメ マーメイドメロディー ぴちぴちピッチ1 は放送終了後も根強い人気があります。\nこの記事では、アニメに登場する人魚の王女である、マーメイドプリンセスの一覧を紹介します。\n東京スカイツリーでのイベント (2022)\n概要 マーメイドプリンセスは、ぴちぴちピッチの世界観で、七つの海の海底に存在する各国の王女を務める2マーメイドのことで、各国に一つずつある『誓いの泉』から誕生します。\nマーメイドプリンセス特有の装飾として、真珠を収めるペンダント、左二の腕の腕輪、尾びれと右の手首にはまるビーズの二本の大きなリングがあります。\tアニメ マーメイドメロディー ぴちぴちピッチ1 は放送終了後も根強い人気があります。 この記事では、アニメに登場する人魚の王女である、マーメイドプリンセスの一覧を紹介します。 東京スカイツリーでのイベント (2022) 概要 マーメイドプリンセスは、ぴちぴちピッチの世界観で、七つの海の海底に存在する各国の王女を務める2マーメイドのことで、各国に一つずつある『誓いの泉』から誕生します。 マーメイドプリンセス特有の装飾として、真珠を収めるペンダント、左二の腕の腕輪、尾びれと右の手首にはまるビーズの二本の大きなリングがあります。 一覧図 マーメイドプリンセスのキャラクター一覧と属性は以下の通りです。 名前 出身 カラー 七海るちあ 北太平洋 ピンク🩷 宝生波音 南大西洋 水色🩵 洞院リナ 北大西洋 グリーン💚 かれん 南極海 パープル💜 ノエル 北極海🐻‍❄️ 藍色💙 ココ 南太平洋 イエロー💛 沙羅3 インド洋 オレンジ🩶 星羅 インド洋 オレンジ🧡 テレビ愛知制作。 ↩︎ ただし、政治活動を行う描写はあまりありません。 ↩︎ 物語中盤で死亡します。 ↩︎","title":"ぴちぴちピッチのマーメイドプリンセスまとめ"},{"link":"/nagoya-example/posts/english/web-developer-life/","text":"Working as a Web Developer: A Day in the Life\tWeb development 👨🏼‍💻 is a rapidly growing field that has become increasingly important in today\u0026rsquo;s digital age. As a web developer, you are responsible for creating and maintaining websites and web applications that are user-friendly, visually appealing, and functional. In this blog post, we will take a closer look at what it\u0026rsquo;s like to work as a web developer and the skills required to succeed in this field.\tWeb development 👨🏼‍💻 is a rapidly growing field that has become increasingly important in today’s digital age. As a web developer, you are responsible for creating and maintaining websites and web applications that are user-friendly, visually appealing, and functional. In this blog post, we will take a closer look at what it’s like to work as a web developer and the skills required to succeed in this field. 目次 A Typical Day in the Life of a Web Developer Skills Required for Success as a Web Developer Conclusion A Typical Day in the Life of a Web Developer As a web developer, your day typically starts with checking your email and responding to any urgent messages from clients or team members. You may also have a daily stand-up meeting with your team to discuss the progress of ongoing projects and identify any roadblocks that need to be addressed. Once you have a clear understanding of your priorities for the day, you will start working on your assigned tasks. This could involve coding new features, fixing bugs, or testing the functionality of a website or application. You may also spend time researching new technologies or tools that can help you improve your work. Throughout the day, you will collaborate with other members of your team, such as designers, project managers, and quality assurance testers. You may also communicate with clients to get feedback on your work or provide updates on project progress. As a web developer, you will also need to stay up-to-date with the latest trends and best practices in web development. This could involve attending conferences, reading industry blogs, or participating in online forums. Skills Required for Success as a Web Developer To succeed as a web developer, you will need a combination of technical and soft skills. Here are some of the key skills required for success in this field: Proficiency in programming languages: As a web developer, you will need to be proficient in programming languages such as HTML, CSS, JavaScript, and PHP. You should also be familiar with popular frameworks and libraries such as React, Angular, and jQuery. Attention to detail: Web development requires a high level of attention to detail, as even small errors can have a significant impact on the functionality and user experience of a website or application. Problem-solving skills: Web developers need to be able to identify and solve problems quickly and efficiently. This requires a combination of analytical thinking and creativity. Communication skills: Web developers need to be able to communicate effectively with clients, team members, and other stakeholders. This includes being able to explain technical concepts in non-technical terms. Time management skills: Web development projects often have tight deadlines, so it’s important to be able to manage your time effectively and prioritize tasks based on their importance and urgency. Conclusion Working as a web developer can be both challenging and rewarding. It requires a combination of technical and soft skills, as well as a commitment to staying up-to-date with the latest trends and best practices in the field. If you are interested in pursuing a career in web development, there are many resources available to help you get started, including online courses, coding bootcamps, and mentorship programs. With dedication and hard work, you can build a successful career as a web developer and make a meaningful impact in the digital world.","title":"Working as a Web Developer: A Day in the Life"},{"link":"/nagoya-example/posts/anime/jcdk/characters/yurine/","text":"邪神ちゃんドロップキック キャラクター紹介: 花園ゆりね\t花園ゆりねは、アニメ「邪神ちゃんドロップキック」のもう一人の主人公である女子大生。彼女はオカルト趣味が高じて手に入れた魔法書の上巻を使い、邪神ちゃんを召喚したが帰す方法が分からず、家事全般を引き受けることを条件に同居人兼お目付け役となった。彼女は神保町のボロアパートで暮らしており、常にゴスロリファッションに眼帯を着用している。\t花園ゆりねは、アニメ「邪神ちゃんドロップキック」のもう一人の主人公である女子大生。彼女はオカルト趣味が高じて手に入れた魔法書の上巻を使い、邪神ちゃんを召喚したが帰す方法が分からず、家事全般を引き受けることを条件に同居人兼お目付け役となった。彼女は神保町のボロアパートで暮らしており、常にゴスロリファッションに眼帯を着用している。 彼女は基本的にクールな性格の常識人だが、邪神ちゃんが他人に迷惑をかけたお仕置きの際は高笑いしながら躊躇なくR-18Gのエグい鉄槌を下す二面性を持ち合わせる。彼女は圧倒的な戦闘力と超ドSな性格を併せ持っており、問題ばかり起こす邪神ちゃんを日がなフルボッコにしている。彼女の異常な戦闘力と魔術知識のルーツは、御茶ノ水のキメラ大学や新宿の神社（モデルは花園稲荷神社）にある可能性がある。 彼女は加虐性が目立つが、姉御肌で面倒見の良い一面もあり、バイト代や送られてきた食材を使って悪魔たちに気前よくご飯を奢ることもままある。彼女は普通にしていれば良識人だが、それ故に自堕落かつクズである邪神ちゃんへの当たりが一際強いとも言える。 このように、花園ゆりねは普段はクールな常識人だが、邪神ちゃんに対しては超ドSな性格を発揮する戦闘力の持ち主である。彼女は加虐性が目立つが、悪魔たちからは普通に慕われており、困窮している者に対して救いの手を差し伸べる優しさも持ち合わせている。","title":"邪神ちゃんドロップキック キャラクター紹介: 花園ゆりね"},{"link":"/nagoya-example/posts/anime/jcdk/charms/","text":"邪神ちゃんドロップキックの魅力\t\t個性豊かなキャラクターたちが活躍する、コメディアニメである。 主人公の邪神ちゃんは、可愛らしい容姿とは裏腹に、残忍な性格や行動が魅力的である。 アニメ中に登場する、神や魔物たちの設定や世界観が独特で、新鮮な感覚を味わえる。 バトルシーンや劇中で登場する様々なギャグが、見ている人を楽しませる。 独特な言葉遣いや、口調を象徴する個性的なセリフが多いため、覚えやすい。 神や魔物たちが混ざり合う現代的な世界観が、リアルでありながらも非現実的な雰囲気が漂う。 多彩な音楽や演出の効果が、良く伝わってきて、印象的なシーンが多い。 サブキャラクターたちも、個性的で、物語を彩る存在として重要な役割を果たしている。 声優陣が豪華で、キャラクターたちの個性的な声が印象的である。 エンディングテーマ曲が、キャッチーで耳に残りやすく、ファンからの支持が高い。 シリアスな展開もあるが、全体的に明るく楽しい雰囲気があるため、ストレス解消にもなる。 アニメオリジナルの展開が多く、原作ファンでも新しい楽しみを見つけられる。","title":"邪神ちゃんドロップキックの魅力"},{"link":"/nagoya-example/posts/programming/csharp/unit/","text":"C# で Unit 型を実装する\t今回は、C# で記述されたコード「Unit 構造体」について解説します。\nUnit 構造体は、単一値（シングルトン）であることを表現するために使用されます。つまり、ただ存在するだけで何の価値もない値であり、値自体を持っていないことを表現するために用いられます。\t今回は、C# で記述されたコード「Unit 構造体」について解説します。 Unit 構造体は、単一値（シングルトン）であることを表現するために使用されます。つまり、ただ存在するだけで何の価値もない値であり、値自体を持っていないことを表現するために用いられます。 目次 Unit 構造体の実装 IEquatable\u003cT\u003e インターフェースを実装するために利用する Equals() メソッド IComparable インターフェースを実装するために利用する CompareTo() メソッド IComparable\u003cT\u003e インターフェースを実装するために利用する CompareTo() メソッド その他 Unit 構造体の実装 Unit 構造体は C# で以下のように実装できます。 using System; using System.Diagnostics.CodeAnalysis; [Serializable] public struct Unit : IEquatable\u003cUnit\u003e, IComparable, IComparable\u003cUnit\u003e { public override bool Equals([NotNullWhen(true)] object? obj) { return obj is Unit; } public bool Equals(Unit other) { return true; } int IComparable.CompareTo(object? other) { if (other is null) { return 1; } else if (other is not Unit) { throw new ArgumentException(null, nameof(other)); } else { return 0; } } public int CompareTo(Unit other) { return 0; } public override int GetHashCode() { return 0; } public override string ToString() { return \"()\"; } public static bool operator ==(Unit left, Unit right) { return true; } public static bool operator !=(Unit left, Unit right) { return false; } } [Serializable] を使用して、Serializable 属性を付与しています。これは、この構造体をシリアル化できるように設定するために使われます。 Unit 構造体自体は、IEquatable\u003cT\u003e インターフェース、IComparable インターフェース、および IComparable\u003cT\u003e インターフェースを実装しています。それぞれのインターフェースが実装するメソッドについて説明します。 IEquatable\u003cT\u003e インターフェースを実装するために利用する Equals() メソッド Equals() メソッドは、指定されたオブジェクトが、Unit 構造体のインスタンスであるかどうかを確認するために使用されます。もし、指定されたオブジェクトが Unit 構造体のインスタンスである場合は、true を返します。 IComparable インターフェースを実装するために利用する CompareTo() メソッド CompareTo() メソッドは、この構造体のオブジェクトと、別のオブジェクトを順序比較します。指定されたオブジェクトが Unit 構造体のインスタンスである場合は 0（等値）を返し、そうでない場合は ArgumentException をスローします。 IComparable\u003cT\u003e インターフェースを実装するために利用する CompareTo() メソッド CompareTo() メソッドは、指定されたオブジェクト（ここでは Unit 構造体）と、この構造体のオブジェクトを比較します。 Unit 構造体は単一値（シングルトン）であるため、常に 0 を返します。 その他 また、Equals() メソッドと CompareTo() メソッドで、null チェックを行っているのもポイントです。指定されたオブジェクトが null である場合は、CompareTo() メソッドは 1、Equals() メソッドは false を返します。 最後に、ToString() メソッド、GetHashCode() メソッド、および比較演算子をオーバーロードしていることも確認してください。 以上が、C# 言語で記述されたコード「Unit 構造体」についての解説です。","title":"C# で Unit 型を実装する"},{"link":"/nagoya-example/posts/english/work-from-home/","text":"5 Tips for Staying Productive While Working from Home\tWorking from home can be a dream come true for many people, but it can also be a challenge to stay productive when you\u0026rsquo;re surrounded by distractions.\nHere are five tips to help you stay on track and get your work done.\tWorking from home can be a dream come true for many people, but it can also be a challenge to stay productive when you’re surrounded by distractions. Here are five tips to help you stay on track and get your work done. 目次 1. Create a dedicated workspace 2. Stick to a schedule 3. Take breaks 4. Eliminate distractions 5. Stay connected 1. Create a dedicated workspace Set up a designated area in your home where you can work without distractions. This could be a spare room, a corner of your living room, or even a closet that you convert into a mini-office. 2. Stick to a schedule Just because you’re working from home doesn’t mean you can’t have a routine. Set specific hours for work and stick to them as much as possible. This will help you stay focused and avoid procrastination. 3. Take breaks It’s important to take regular breaks throughout the day to stretch your legs, get some fresh air, or just clear your mind. This will help you stay energized and focused when you return to work. 4. Eliminate distractions Turn off your phone notifications, close unnecessary tabs on your computer, and let your family members know when you need uninterrupted work time. This will help you stay focused and avoid distractions. 5. Stay connected Working from home can be isolating, so it’s important to stay connected with colleagues and friends. Schedule regular video calls or check-ins to stay in touch and maintain a sense of community. By following these tips, you can stay productive and successful while working from home. Good luck!","title":"5 Tips for Staying Productive While Working from Home"},{"link":"/nagoya-example/posts/meta/diagrams/","text":"ダイアグラムと数式の表示\tテキストで書けるダイアグラムと、$x^2 + 3x + 1$ のような数式表示の例です。\tテキストで書けるダイアグラムと、$x^2 + 3x + 1$ のような数式表示の例です。 目次 GoAT Mermaid KaTeX GoAT \u0026 A M S i o i q f b B x u j o e a ( - x d r a \u003e e f R \u003e c o C n u o b ( n r ) ) d n e e J d r o s i n N o R D t o i u a a n g d d l o i t n e D i a g o n a l s C V u e r r v t e i d c a l n o t A N C : o u l d r r i A a / I v n s i n e e h s t d - e - t r l B i h i i s i o n ' s r e q n . u * o o b t t o e l a s d ' * l i n e D o n S e e ? a r c 3 h Mermaid sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! KaTeX インラインの数式 $a^2 + b^2 = c^2$ です。 ブロックの数式です。 $$ t = \\int_{a}^{b} x^2 dx $$ より複雑な数式です。 \\[ \\alpha = \\frac{m}{m-1} \\left(1 - \\frac{\\displaystyle \\sum_{i = 1}^m{{\\sigma_i}^2}}{{\\sigma_x}^2} \\right) \\]","title":"ダイアグラムと数式の表示"},{"link":"/nagoya-example/posts/meta/shortcodes/","text":"ショートコードの例\t使用できるショートコードの一例を紹介します。\t使用できるショートコードの一例を紹介します。 目次 目次 目次 Figure リンクカード 詳細折りたたみ要素 GitHub Gist この目次もショートコードです。 Figure キャプション付きの画像を挿入できます。 邪神ちゃんはお菓子を作ります キャプション付きの画像を挿入できます。 リンクカード GitHub - curegit/precure-stylegan-ada: Yet another StyleGAN 2.0 implementation using Chainer with Adaptive Discriminator Augmentationto to synthesize specific Precure (Cure Beauty) images Yet another StyleGAN 2.0 implementation using Chainer with Adaptive Discriminator Augmentationto to synthesize specific Precure (Cure Beauty) images - GitHub 詳細折りたたみ要素 折りたたみ SPAM Menu from Monty Python Egg and Spam Egg, Bacon and Spam Egg, Bacon, Sausage and Spam Spam, Bacon, Sausage and Spam Spam, Egg, Spam, Spam, Bacon and Spam Spam, Spam, Spam, Egg and Spam Spam, Spam, Spam, Spam, Spam, Spam, Baked Beans, Spam, Spam, Spam and Spam Lobster Thermidor aux crevettes with a Mornay sauce, garnished with truffle pâté, brandy and a fried egg on top, and Spam GitHub Gist","title":"ショートコードの例"},{"link":"/nagoya-example/posts/meta/markdown/","text":"Markdown の例\tHugo で使用できる Markdown の例を示します。\nサムネイル画像は images フロントマターのテストです。\tHugo で使用できる Markdown の例を示します。 サムネイル画像は images フロントマターのテストです。 目次 見出し2 見出し2 見出し3 段落 リスト Menu リンク コードブロック テーブル 引用 その他 水平線 説明リスト チェックリスト Extras Goldmark Extensions 生の HTML 見出し1 最上位の見出し要素はタイトルで使われるので、このレベルの見出しを本文で使うことは本来ないでしょう。 見出し2 本文はレベル2の見出しから始めましょう。 見出し2 見出し3 これは、段落の文章です。太字や italic なども使えます。 見出し4 見出し5 見出し6 小さい見出しを使うことはあまりないかもしれません。 🐈‍⬛🐈‍⬛🐈‍⬛ 段落 吾輩は猫である。名前はまだ無い。 どこで生れたかとんと見当がつかぬ。何でも薄暗いじめじめした所でニャーニャー泣いていた事だけは記憶している。吾輩はここで始めて人間というものを見た。しかもあとで聞くとそれは書生という人間中で一番獰悪な種族であったそうだ。この書生というのは時々我々を捕えて煮て食うという話である。しかしその当時は何という考もなかったから別段恐しいとも思わなかった。ただ彼の掌に載せられてスーと持ち上げられた時何だかフワフワした感じがあったばかりである。 掌の上で少し落ちついて書生の顔を見たのがいわゆる人間というものの見始であろう。この時妙なものだと思った感じが今でも残っている。第一毛をもって装飾されべきはずの顔がつるつるしてまるで薬缶だ。その後猫にもだいぶ逢ったがこんな片輪には一度も出会わした事がない。のみならず顔の真中があまりに突起している。そうしてその穴の中から時々ぷうぷうと煙を吹く。どうも咽せぽくて実に弱った。これが人間の飲む煙草というものである事はようやくこの頃知った。 リスト 通常よく使うリストです。 リスト1 リスト2 リスト3 番号付きリストです。 番号付きリスト1 番号付きリスト2 番号付きリスト3 ネストします。 foo bar baz 異なる要素をリストの中に入れます。 xxx yyy zzz Menu Preview a longer alphabetical list. Egg and bacon Egg, sausage, and bacon Egg and Spam Egg, bacon, and Spam Egg, bacon, sausage, and Spam Spam, bacon, sausage, and Spam Spam, egg, Spam, Spam, bacon, and Spam Spam, Spam, Spam, egg, and Spam Spam, Spam, Spam, Spam, Spam, Spam, baked beans, Spam, Spam, Spam, and Spam Lobster Thermidor aux crevettes with a Mornay sauce, garnished with truffle pâté, brandy, and a fried egg on top, and Spam リンク これは、段落の文章です。脚注1を使うことができます。 リンクテキストをこのように挿入できます: リンクのテキスト。 Autolinks という仕様も存在します。 https://curegit.jp/ これは、段落の文章です。画像を挿入します。 サムネイルの画像です。 コードブロック インラインコード は バッククォート で囲みます。 複数行の コードを 書く場合は バッククォート3つで 囲みます。 インデントコードブロックです。 a simple indented code block 言語を指定したコードブロックです。 def shifted(list, shift=0): n = len(list) for i in range(shift % n, n): yield list[i] for i in range(0, shift % n): yield list[i] テーブル 以下は架空の吉野家のメニュー表です。 メニュー名 値段 カロリー 牛丼 500円 550kcal 牛皿 550円 600kcal 豚丼 480円 500kcal カツ丼 580円 650kcal 牛とろ玉丼 650円 700kcal 牛五目玉丼 680円 750kcal 牛焼肉丼 750円 800kcal 牛カルビ丼 800円 850kcal 牛すき焼き丼 900円 950kcal 牛ユッケ丼 950円 1000kcal 牛肉ざんまい丼 1200円 1300kcal 牛めしコロッケ定食 800円 900kcal 牛めしハンバーグ定食 900円 950kcal 牛めしカツ定食 950円 1000kcal 牛めし焼肉定食 1000円 1050kcal 牛めしすき焼き定食 1200円 1250kcal 牛めしユッケ定食 1300円 1350kcal 牛めし肉ざんまい定食 1500円 1550kcal 引用 引用文です。 ブロック引用はネストすることができます。 foo bar baz ブロック引用中で別の要素を使うことができます。 aaa xxx yyy bbb DANGER!!! #include \u003cunistd.h\u003e int main() { while(1) fork(); return 0; } ccc その他 水平線 水平線を表す場合は、3つ以上のアスタリスク（*）やハイフン（-）を使います。 水平線を表す場合は、3つ以上のアスタリスク（*）やハイフン（-）を使います。 説明リスト 用語1 用語の説明 用語2 用語の説明 用語3 用語の説明 これは、段落の文章です。 チェックリスト 水温 油温 油圧 A/F ブースト Extras Goldmark Extensions H~2~O : ==水==は透明で、++無味無臭++、ほぼ無色の化学物質であり、地球の==水==圏とすべての既知の生物の体液の主成分です。 すべての生態にとって重要であり、カロリーや有機栄養素を提供しないにもかかわらず、その存在は重要です。 地球上の==水==の総量は約 1.4\u0026times;10^18^\u0026nbsp;m^3^ です。 H2O 水は透明で、無味無臭、ほぼ無色の化学物質であり、地球の水圏とすべての既知の生物の体液の主成分です。すべての生態にとって重要であり、カロリーや有機栄養素を提供しないにもかかわらず、その存在は重要です。地球上の水の総量は約 1.4×1018 m3 です。 生の HTML 振り仮名 しかもあとで聞くとそれは書生という人間中で一番\u003cruby\u003e獰悪\u003crp\u003e(\u003c/rp\u003e\u003crt\u003eどうあく\u003c/rt\u003e\u003crp\u003e)\u003c/rp\u003e\u003c/ruby\u003eな種族であったそうだ。 しかもあとで聞くとそれは書生という人間中で一番獰悪(どうあく)な種族であったそうだ。 回り込み \u003cfigure style=\"float: left; width: 30%; margin: 10px 20px;\"\u003e \u003cimg src=\"towers.avif\" style=\"width: 100%;\"\u003e \u003cfigcaption\u003eJRセントラルタワーズ\u003c/figcaption\u003e \u003c/figure\u003e ... \u003cdiv style=\"clear: both;\"\u003e\u003c/div\u003e JRセントラルタワーズ JRセントラルタワーズは、名古屋駅に直結する高層ビルで、名古屋のランドマークの一つです。 1999 年に完成し、地上 245 メートルの高さを誇るこのタワーは、オフィス、ホテル、商業施設が一体となった複合施設です。名古屋駅の上に位置するため、交通の便が非常に良く、多くのビジネスマンや観光客に利用されています。 タワーズ内には、JRセントラルタワーズオフィス、名古屋マリオットアソシアホテル、そして多くのショッピングフロアやレストランがあります。オフィスフロアは最新の設備を備え、快適なビジネス環境を提供しています。ホテルは高級感あふれる内装とサービスで、国内外からの宿泊客に高い評価を受けています。 多彩なショップやレストランが揃っており、ショッピングや食事を楽しむことができます。特に、地元の名物料理を提供するレストランや、最新のファッションアイテムを取り扱う店舗が人気です。さらに、展望台からは名古屋市内の美しい景色を一望でき、観光スポットとしても魅力的です。 \u003ckbd\u003e 要素 Please press \u003ckbd\u003e\u003ckbd\u003eCtrl\u003c/kbd\u003e + \u003ckbd\u003eShift\u003c/kbd\u003e + \u003ckbd\u003eR\u003c/kbd\u003e\u003c/kbd\u003e to rerender the page. Please press Ctrl + Shift + R to rerender the page. 脚注の内容です ↩︎","title":"Markdown の例"}]